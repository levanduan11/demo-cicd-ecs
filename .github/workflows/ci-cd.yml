# Spring boot gradle CI/CD workflow build using GitHub Actions auto deployment to ECS jdk 21 gradle 8.4
name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code 
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle','**/gradle-wrapper.properties') }} 
          restore-keys: ${{ runner.os }}-gradle-

      - name: Set up Docker Buildx 
        uses: docker/setup-buildx-action@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          IMAGE_TAG=latest
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:${IMAGE_TAG}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Deploy to ECS
        run: |
          TASK_FAMILY="my-springboot-app"
          SERVICE_NAME="my-springboot-app-service"
          CLUSTER_NAME="my-cluster"
          CONTAINER_NAME="my-springboot-app-container"
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:latest

          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY)
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE_URI "$IMAGE_URI" '.taskDefinition | .containerDefinitions[0].image = $IMAGE_URI | .family')


          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --container-definitions "$NEW_TASK_DEFINITION" \
            --family $TASK_FAMILY \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            )




